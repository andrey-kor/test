{"version":3,"sources":["components/DataUser.js","App.js","serviceWorker.js","index.js"],"names":["DataUser","setUser","validOk","element","errorString","document","querySelector","classList","remove","add","innerHTML","validErr","valid","id","value","getElementById","test","yearInput","slice","yearCurrent","Date","getFullYear","console","log","submitHandler","event","preventDefault","inputs","querySelectorAll","counterValid","input","className","name","sex","dateBirth","weight","growth","style","opacity","setTimeout","display","user","window","addEventListener","type","placeholder","required","autoComplete","onChange","target","onBlur","App","useState","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba7fdeb1.chunk.js","sourcesContent":["import React from 'react'\n\nfunction DataUser ({setUser, user}) { \n\n    window.addEventListener('load', submit)\n    function submit(){\n        document.querySelector('.popup__form').addEventListener('submit', submitHandler)\n    }\n\n    function validOk(element){\n        let errorString = document.querySelector('.popup__error')\n        element.classList.remove('invalid')\n        element.classList.add('valid')\n        errorString.innerHTML = \"\"\n    } \n\n    function validErr(element){\n        element.classList.remove('valid')\n        element.classList.add('invalid')\n    }\n\n    function valid(id, value){\n        let element = document.getElementById(id)\n        let errorString = document.querySelector('.popup__error')\n        switch (id) {\n            case \"inputName\":\n                if (/^([а-я]+|[a-z]+)$/ui.test(value)) validOk(element)                \n                else {\n                    validErr(element)\n                    errorString.innerHTML = \"Имя может содержать только буквы\"\n                }\n                break\n            case \"inputDate\": \n                let yearInput = value.slice(0,4)\n                let yearCurrent = new Date().getFullYear()\n                if (yearInput>1920 && yearInput<yearCurrent) validOk(element)  \n                else {\n                    validErr(element)\n                    errorString.innerHTML = \"Проверьте корректность введённой даты\"\n                }\n                break\n            case \"inputGrowth\": \n            if (value>50 && value<220) validOk(element)  \n            else {\n                validErr(element)\n                errorString.innerHTML = \"Рост не может быть меньше 50 и больше 220 см\"\n            }\n            break\n            case \"inputWeight\":\n            if (value>20 && value<200) validOk(element)  \n            else {\n                validErr(element)\n                errorString.innerHTML = \"Вес не может быть меньше 20 и больше 200 кг\"\n            }\n            break\n            default: console.log(\"can't find classes inputs\");\n        }\n    }\n\n    function convertDate (value){\n        return `${value.slice(8,10)}.${value.slice(5,7)}.${value.slice(0,4)}`\n    }\n\n    function submitHandler(event){\n\n        event.preventDefault()\n        let inputs = document.querySelectorAll('.popup__form input')\n        let counterValid = 0\n        for (let input of inputs){\n           let isValid = /invalid/.test(input.className) \n            if (isValid) {\n               document.querySelector('.popup__error').innerHTML = \"Пожалуйста, исправьте некорректные значения\"\n                return\n            }\n            else counterValid += 1\n        }\n            console.log(\"valid\", counterValid);\n\n        if (counterValid === 6) {\n            setUser(user = {\n                name: document.querySelector('#inputName').value,\n                sex: document.querySelector('#inputSex') ? \"м\" : \"ж\",\n                dateBirth: convertDate(document.querySelector('#inputDate').value),\n                weight: document.querySelector('#inputWeight').value,\n                growth: document.querySelector('#inputGrowth').value,\n            })\n            \n            document.querySelector(\".popup__outer\").style.opacity = \"0\"; \n            setTimeout(displayNone, 500)\n\n            function displayNone(){\n                document.querySelector(\".popup__outer\").style.display = \"none\"\n            }\n        }\n    }\n\n    return (\n        <div className = \"popup__outer\">\n            <div className = \"popup__wrapper\"> \n                <form className = \"popup__form\" >\n                    <div className = \"input__wrapper\">\n                        <span className = \"input-text\">Ваше имя:</span>\n                        <input id = \"inputName\" type = \"text\" placeholder = \"Имя\" required autoComplete=\"off\" className = \"popup-input input-name\"\n                        onChange ={ event => {\n                            valid (event.target.id, event.target.value)\n                        }}\n                        />    \n                    </div>\n                    <div className = \"input__wrapper\">\n                        <span className = \"input-text\">Пол:</span>\n                        <div className = \"span-wrapper\">\n                            <div><input name = \"sex\" id = \"inputSex\" type = \"radio\" value = \"м\" required autoComplete=\"off\" className = \"input-sex\"/>м</div>\n                            <div><input name = \"sex\" id = \"inputSex\" type = \"radio\" value = \"ж\" required autoComplete=\"off\" className = \"input-sex\"/>ж</div>    \n                        </div>\n                    </div>\n                    <div className = \"input__wrapper\">\n                        <span className = \"input-text\">Дата рождения:</span>\n                        <input id = \"inputDate\" type = \"date\" required className = \"popup-input input-date\" \n                        onBlur ={ event => {\n                            valid (event.target.id, event.target.value)\n                        }}\n                        />    \n                    </div>\n                    <div className = \"input__wrapper\">\n                        <span className = \"input-text\">Рост:</span>\n                        <input id = \"inputGrowth\" type = \"text\" required autoComplete=\"off\" placeholder = \"Рост, см\" className = \"popup-input input-growth\"\n                        onBlur ={ event => {\n                            valid (event.target.id, event.target.value)\n                        }}\n                        />    \n                    </div>\n                    <div className = \"input__wrapper\">\n                        <span className = \"input-text\">Вес:</span>\n                        <input id = \"inputWeight\" type = \"text\" required autoComplete=\"off\" placeholder = \"Вес, кг\" className = \"popup-input input-weight\"\n                        onBlur ={ event => {\n                            valid (event.target.id, event.target.value)\n                        }}\n                        />    \n                    </div>\n                    <span className = \"popup__error\"></span>\n                    <button className=\"popup__buttonSend\">Рассчитать</button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default DataUser","import React, {useState} from 'react';\nimport './App.css';\nimport DataUser from './components/DataUser'\n\nfunction App() {\n\n  let [user, setUser] = useState({\n    name: \"Andrey\",\n    sex: \"м\",\n    dateBirth: \"15.03.1997\",\n    weight: 78,\n    growth: 189,\n  })\n\n   return (\n    <div className=\"wrapper\">\n      <h1>Calory App</h1>\n      <DataUser setUser = {setUser} user = {user}/>\n      {/* <UserBlock user = {user}/>\n      <EatingBlock/>\n      <CanvasBlock/>  */}\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}